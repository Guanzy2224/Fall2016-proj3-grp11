load("D:/Yinxiang Gao/2015 M.A.STAT Courses/STATGR5243_Applied Data Science/Fall2016-proj3-grp11/output/presave/run2_1-1000train_final/feature_training.RData")
rf
rf
rf$predicted
rf$call
rf$confusion
summary(rf)
rf$mtry
rf$err.rate
rf$oob.times
rf$test
rf$votes
rf$ntree
library(EBImage)
library(glcm)
library(raster)
library(jpeg)
library(randomForest)
library(dplyr)
library(abind)
library(foreach)
library(doParallel)
rf
setwd(Root)
test_files = list.files(TestRoot)[1:10]
n_test=length(test_files)
load("./output/feature_training.RData") # load saved training features
setwd(TestRoot)
cl<-makeCluster(no.cores)
registerDoParallel(cl)
testX <- foreach(i=1:n_test, .inorder = T, .combine = "rbind", .packages = c("EBImage","glcm","raster","jpeg","abind")) %dopar% {
imgName=test_files[i]
temp=getFeature(imgName)
temp=makeFeatureCluster(temp,clusterNum = clusterN)
temp=t( (t(temp)-featuresMean) / scaleSD + featuresMean )
testX=findSimilarFeatureNumber(TheFeature = temp, Dictionary = SomeFeature)
}
#Now use the just-made dictionary to construct a word frequency predictor for each image.
setwd(Root)
load("./output/feature_training.RData") # load saved training features
test_files = list.files(TestRoot)[1:10]
n_test=length(test_files)
setwd(TestRoot)
cl<-makeCluster(no.cores)
registerDoParallel(cl)
testX <- foreach(i=1:n_test, .inorder = T, .combine = "rbind", .packages = c("EBImage","glcm","raster","jpeg","abind")) %dopar% {
imgName=test_files[i]
temp=getFeature(imgName)
temp=makeFeatureCluster(temp,clusterNum = clusterN)
temp=t( (t(temp)-featuresMean) / scaleSD + featuresMean )
testX=findSimilarFeatureNumber(TheFeature = temp, Dictionary = SomeFeature)
}
stopCluster(cl)
system.time({
m1=Mytrain(SomepredictorX,responseY,no.cores=4)
pred1=Mytest(m1,testX)
})
pred1
setwd(Root)
load("./output/feature_eval.Rdata")
source("./lib/train.R")
source("./lib/test.R")
# Our model: gbm on glcm+rgb features
system.time({
m1=Mytrain(SomepredictorX,responseY,no.cores=4)
pred1=Mytest(m1,testX)
})
pred1
